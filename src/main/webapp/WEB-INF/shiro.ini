[main]
# set login url
authc =	org.apache.shiro.web.filter.authc.FormAuthenticationFilter
authc.loginUrl = /faces/authentification/index.xhtml
 
# ------------------------
# Database

# Own Realm
#jdbcRealm = com.security.View.util.MyCustomRealm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# ------------------CRIPTAGE Password Sha256  
#sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#base64 encoding, not hex in this example:  
#sha256Matcher.storedCredentialsHexEncoded = false  
#sha256Matcher.hashIterations = 1024  
  
#jdbcRealm.credentialsMatcher = $sha256Matcher  


# User Query
# default is "select password from users where username = ?"
jdbcRealm.authenticationQuery = SELECT password, salt FROM Utilisateur WHERE username = ?

# permissions

jdbcRealm.userRolesQuery = select rolename from Utilisateur where username = ?


# Connection 
ds = org.postgresql.ds.PGSimpleDataSource
ds.serverName = localhost
ds.user = postgres
ds.portNumber = 5432
ds.password = admin
ds.databaseName = sodigaz_data2
jdbcRealm.dataSource=$ds

 
securityManager.realms = $jdbcRealm
 

[users]
#password test123
adminUser = adminPassword , admin
guestUser = guestPassword , guest
testa = testa , guest

[roles]
admin = *
editor = articles:*
author = articles:compose,articles:save


[urls]
# filter setup for secured pages

/**/authentification/loginPage.xhtml = anon
/**/index.xhtml = authcBasic
/user/** = authc, roles[guest]
/**/admin/** = authcBasic, roles[admin]
/**/guest/** = authc, roles[guest]
/logout = logout
/user/** = user

/stats = authcBasic, perms["stats:read"]
# /** = authcBasic

# filter setup for secured pages
/javax.faces.resource/** = anon
 
